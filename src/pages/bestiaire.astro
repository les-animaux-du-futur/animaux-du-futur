---
// Component Imports

import BaseLayout from "../layouts/BaseLayout.astro";
import Hero from "../components/Hero.astro";

import { getBiomes, getSpecies } from "../functions";

const { species } = getSpecies();
const { biomes } = getBiomes();
---

<BaseLayout title="Les Animaux du Futur | Bestiaire" description="Bienvenue sur la page Bestiaire, retrouvez tout les animaux crées depuis la première expédition...">
  <Hero title="Le Bestiaire" imgUrl="/assets/images/bestiaireHero.webp" text="Découvrez la liste des animaux découverts par les explorateurs"/>
  <section class="container content">
    <div class="header-content">
      <div class="research">
        <input type="search" id="searchInput" oninput="filterSpecies()" />
      </div>
      <div class="filters">
        <div class="content-filter">
          <select name="filter" id="filter">
            <option value="">Filtrer</option>
          </select>
          <svg class="arrow-filter" xmlns="http://www.w3.org/2000/svg" width="17" height="7" viewBox="0 0 17 7" fill="none">
            <path d="M15.8428 1L8.84773 6L1.85268 1" stroke="#DEF3FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <div class="content-filter">
          <select name="sort" id="sort">
            <option value="">Trier</option>
            <option value="id">Identifiant</option>
            <option value="biome">Biome</option>
          </select>
          <svg class="arrow-filter" xmlns="http://www.w3.org/2000/svg" width="17" height="7" viewBox="0 0 17 7" fill="none">
            <path d="M15.8428 1L8.84773 6L1.85268 1" stroke="#DEF3FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <div class="content-filter none">
          <select name="asc" id="asc">
            <option value="asc">Ascendant</option>
            <option value="desc">Descendant</option>
          </select>
          <svg class="arrow-filter" xmlns="http://www.w3.org/2000/svg" width="17" height="7" viewBox="0 0 17 7" fill="none">
            <path d="M15.8428 1L8.84773 6L1.85268 1" stroke="#DEF3FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
      </div>
    </div>
    <div class="data-container"></div>
  </section>
</BaseLayout>

<script is:inline define:vars={{ biomes, species }}>
  const dataContainer = document.querySelector(".data-container");
  const searchInput = document.getElementById("searchInput");
  const filterSelect = document.getElementById("filter");
  const sortSelect = document.getElementById("sort");
  const descSelect = document.getElementById("asc");

  // Fonction de filtrage et de tri
  function filterAndSortSpecies() {
    const searchTerm = searchInput.value.trim().toLowerCase();
    const selectedBiome = filterSelect.value.toLowerCase();
    const sortBy = sortSelect.value.toLowerCase();
    const sortDesc = descSelect.value === "asc";

    const filteredSpecies = species.filter((specie) => {
      const matchesSearch = specie.name.toLowerCase().includes(searchTerm);
      const matchesBiome =
        selectedBiome === "" || specie.biome.toLowerCase() === selectedBiome;
      return matchesSearch && matchesBiome;
    });

    let sortedSpecies = filteredSpecies.slice();

    if (sortBy === "" || sortBy === "id") {
      sortedSpecies.sort((a, b) => {
        const comparison = sortDesc ? -1 : 1;
        return comparison * (parseInt(b.id) - parseInt(a.id));
      });
    } else if (sortBy === "biome") {
      sortedSpecies.sort((a, b) => {
        const comparison = sortDesc ? 1 : -1;
        return comparison * a.biome.localeCompare(b.biome);
      });
    }

    dataContainer.innerHTML = sortedSpecies
      .map((specie, i) => {
        const biome = biomes.find(
          (biome) => biome.name.toLowerCase() === specie.biome.toLowerCase()
        );
        const biomeColor = biome ? biome.color : "black";
        const biomeName = biome ? biome.name : "";
        function formatSpeciesId(id) {
          if (id.length === 1) {
            return `00${id}`;
          } else if (id.length === 2) {
            return `0${id}`;
          } else {
            return id;
          }
        }
        return `
			<a href="/species/${parseInt(i)}" class="animal">
				<img src="/${specie.speciesImage}" alt="image species"/>
				<div class="title">
					<h4>
						${specie.name}
					</h4>
					<p>
						#${formatSpeciesId(specie.id)}
					</p>
				</div>
				<div class="biome" style="background-color: ${biomeColor};">
					<p>
						${biomeName}
					</p>
				</div>
			</a>
			`;
      })
      .join("");
  }

  // Remplir la liste déroulante des filtres
  biomes.forEach((biome) => {
    filterSelect.innerHTML += `<option value="${biome.name}">${biome.name}</option>`;
  });

  // Ajoutez des événements pour déclencher le filtrage et le tri
  filterSelect.addEventListener("change", filterAndSortSpecies);
  sortSelect.addEventListener("change", filterAndSortSpecies);
  descSelect.addEventListener("change", filterAndSortSpecies);
  searchInput.addEventListener("input", filterAndSortSpecies);

  // Appel initial pour afficher tous les animaux
  filterAndSortSpecies();
</script>

<style lang="scss" is:global>
  .content {
    position: relative;
    display: flex;
    flex-direction: column;
    .header-content {
      position: absolute;
      top: -14rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      @media screen and (max-width: 600px) {
        position: initial;
      }
      @media screen and (max-width: 400px) {
        width: 100%
      }
      .research {
        position: relative;
        display: flex;
        align-items: center;
        #searchInput {
          width: 20rem;
          height: 2.5rem;
          border-radius: 2rem;
          padding: 1rem;
          border: none;
          @media screen and (max-width: 400px) {
            width: 100%;
          }
        }
        svg {
          position: absolute;
          right: 1rem;
          pointer-events: none;
        }
      }
      .filters {
        display: flex;
        gap: 1rem;
        @media screen and (max-width: 400px) {
          width: calc(100% - 1rem);
        }
        .content-filter {
          position: relative;
          display: flex;
          align-items: center;
          width: fit-content;
          @media screen and (max-width: 400px) {
            width: 50%;
          }
          &.none {
            display: none;
          }
          svg {
            pointer-events: none;
          }
          .svg-filter {
            position: absolute;
            left: 1rem;
          }
          select {
            width: 10rem;
            height: 2.5rem;
            border-radius: 3rem;
            border: 1px solid white;
            background: rgba(0, 0, 0, 0.75);
            backdrop-filter: blur(2px);
            color: #DEF3FF;
            border: none;
            outline: none;
            display: inline-block;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            text-indent: 1rem;
            font-size: 1rem;
            cursor: pointer;
          }
          .arrow-filter {
            position: absolute;
            right: 1rem;
          }
        }
      }
    }
    .data-container {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1.75rem;
      margin-top: 4rem;
      @media screen and (max-width: 768px) {
        grid-template-columns: repeat(2, 1fr);
      }
      @media screen and (max-width: 600px) {
        margin-top: 2rem;
      }
      .animal {
        display: flex;
        flex-direction: column;
        text-decoration: none;
        img {
          width: 100%;
          aspect-ratio: 4 / 5;
        }
        .title {
          display: flex;
          justify-content: space-between;
          color: #fff;
          margin-bottom: 0.75rem;
          p {
            margin: 0;
          }
        }
        .biome {
          display: flex;
          justify-content: center;
          align-items: center;
          width: fit-content;
          padding: 0.3rem 0.8rem;
          border-radius: 1.125rem;
          p {
            color: black;
            font-size: 0.875rem;
            margin: 0;
          }
        }
        h4 {
          margin: 0;
        }
      }
    }
  }
</style>
